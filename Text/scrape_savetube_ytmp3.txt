import axios from 'axios'
import crypto from 'crypto'

const savetube = {
  api: {
    base: 'https://media.savetube.me/api',
    cdn: '/random-cdn',
    info: '/v2/info',
    download: '/download',
  },
  headers: {
    'accept': '*/*',
    'content-type': 'application/json',
    'origin': 'https://yt.savetube.me',
    'referer': 'https://yt.savetube.me/',
    'user-agent': 'Postify/1.0.0',
  },
  formats: ['144', '240', '360', '480', '720', '1080', 'mp3'],
  crypto: {
    hexToBuffer: hex => Buffer.from(hex.match(/.{1,2}/g).join(''), 'hex'),
    decrypt: async enc => {
      if (!enc) throw new Error('Data terenkripsi tidak tersedia.')
      const secretKey = 'C5D58EF67A7584E4A29F6C35BBC4EB12'
      const data = Buffer.from(enc, 'base64')
      const iv = data.slice(0, 16)
      const content = data.slice(16)
      const key = savetube.crypto.hexToBuffer(secretKey)
      const decipher = crypto.createDecipheriv('aes-128-cbc', key, iv)
      let decrypted = decipher.update(content)
      decrypted = Buffer.concat([decrypted, decipher.final()])
      return JSON.parse(decrypted.toString())
    }
  },
  youtube: url => {
    if (!url) return null
    const patterns = [
      /youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
      /youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
      /youtube\.com\/v\/([a-zA-Z0-9_-]{11})/,
      /youtube\.com\/shorts\/([a-zA-Z0-9_-]{11})/,
      /youtu\.be\/([a-zA-Z0-9_-]{11})/
    ]
    for (const p of patterns) {
      if (p.test(url)) return url.match(p)[1]
    }
    return null
  },
  request: async (endpoint, data = {}, method = 'post') => {
    const url = `${endpoint.startsWith('http') ? '' : savetube.api.base}${endpoint}`
    const res = await axios({
      method,
      url,
      data: method === 'post' ? data : undefined,
      params: method === 'get' ? data : undefined,
      headers: savetube.headers,
    })
    return { status: true, code: 200, data: res.data }
  },
  getCDN: async () => {
    const res = await savetube.request(savetube.api.cdn, {}, 'get')
    if (!res.status) throw new Error('CDN tidak ditemukan')
    return { status: true, code: 200, data: res.data.cdn }
  },
  download: async (link, format) => {
    if (!link) throw new Error('Link video tidak ditemukan.')
    if (!format || !savetube.formats.includes(format)) {
      throw new Error(`Format tidak valid. Pilih salah satu dari: ${savetube.formats.join(', ')}`)
    }
    const id = savetube.youtube(link)
    if (!id) throw new Error('Link tidak valid')
    const cdnx = await savetube.getCDN()
    const cdn = cdnx.data
    const info = await savetube.request(`https://${cdn}${savetube.api.info}`, {
      url: `https://www.youtube.com/watch?v=${id}`
    })
    if (!info?.data?.data) throw new Error('Gagal mengambil data dari SaveTube.')
    const decrypted = await savetube.crypto.decrypt(info.data.data)
    const dl = await savetube.request(`https://${cdn}${savetube.api.download}`, {
      id,
      downloadType: format === 'mp3' ? 'audio' : 'video',
      quality: format === 'mp3' ? '128' : format,
      key: decrypted.key
    })
    return {
      status: true,
      code: 200,
      result: {
        title: decrypted.title || 'Tanpa judul',
        type: format === 'mp3' ? 'audio' : 'video',
        format,
        thumbnail: decrypted.thumbnail || `https://i.ytimg.com/vi/${id}/0.jpg`,
        download: dl.data.data.downloadUrl,
        id,
        key: decrypted.key,
        duration: decrypted.duration,
        quality: format === 'mp3' ? '128' : format,
        downloaded: dl.data.data.downloaded
      }
    }
  }
}

const handler = async (m, { conn, text, command, args }) => {
  if (!text) return m.reply(`Masukkan URL YouTube.
Contoh: ${command} https://youtu.be/xxxxxxx`)

  const isDoc = text.endsWith("-doc")
  const link = text.replace(/-doc/gi, '').trim()
  const format = command.includes('ytmp4') ? '360' : 'mp3'
  const dl = await savetube.download(link, format)
 

  const caption = `*YOUTUBE ${format === 'mp3' ? 'MP3' : 'MP4'}*

ðŸ’¾ *File:*
â€¢ Judul: ${dl.result.title}
â€¢ Durasi: ${dl.result.duration}
â€¢ Kualitas: ${dl.result.quality}p

ðŸ§¾ *Note:*
â€¢ Tambahkan -doc di bagian akhir untuk mengirim file dalam bentuk dokumen.`

  await conn.sendMessage(m.chat, {
    text: caption,
    contextInfo: {
      externalAdReply: {
        title: dl.result.title,
        body: dl.result.type.toUpperCase(),
        thumbnailUrl: dl.result.thumbnail,
        mediaUrl: link,
        mediaType: 2,
        renderLargerThumbnail: true,
        sourceUrl: link
      }
    }
  }, { quoted: m })

  if (format === 'mp3') {
    const msg = isDoc ? {
      document: { url: dl.result.download },
      mimetype: 'audio/mp4',
      fileName: `${dl.result.title}.mp3`
    } : {
      audio: { url: dl.result.download },
      mimetype: 'audio/mp4',
      fileName: `${dl.result.title}.mp3`
    }
    await conn.sendMessage(m.chat, msg, { quoted: m })
  } else {
    await conn.sendMessage(m.chat, {
      video: { url: dl.result.download },
      caption: dl.result.title
    }, { quoted: m })
  }
}

handler.help = ['ytmp3 <url>', 'ytmp4 <url>']
handler.tags = ['downloader']
handler.command = /^ytmp3|ytmp4$/i

export default handler